{
  "name": "komponist",
  "version": "0.0.3",
  "main": "index.js",
  "license": "BSD",
  "description": "A simple, yet flexible, client for MPD, the hackable headless audio playback server.",
  "scripts": {
    "make-examples": "node_modules/browserify/bin/cmd.js examples/browser/client.js -o examples/browser/client.build.js"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:hughsk/komponist.git"
  },
  "keywords": [
    "mpd",
    "music",
    "audio",
    "server",
    "protocol",
    "komponist"
  ],
  "author": {
    "name": "Hugh Kennedy",
    "email": "hughskennedy@gmail.com",
    "url": "http://hughskennedy.com/"
  },
  "dependencies": {
    "shoe": "0.0.4"
  },
  "devDependencies": {
    "browserify": "~1.14.5"
  },
  "readme": "# komponist\n\nA simple, yet flexible, Node client library for [MPD](http://mpd.wikia.com/),\nthe hackable headless audio playback server. As a bonus, it runs the same if\nyou use it server-side *or* on the browser!\n\n## Installation\n\n``` bash\nnpm install komponist\n```\n\nOf course, before you go ahead and write any code - make sure you\n[install MPD](http://mpd.wikia.com/wiki/Install) and start it up wherever you\nwant to play your music from. You should probably get MPC (the simple CLI client)\ntoo.\n\n## Basic Usage\n\nWith a small number of exceptions, komponist exposes all of the available\ncommands as callback-style methods. For a full list\n[check out the docs](http://www.musicpd.org/doc/protocol/).\n\n``` javascript\nvar komponist = require('komponist')\n\nvar client = komponist.createConnection(6600, 'localhost', function() {\n  client.add('~/iTunes', function(err) {\n    client.play(function(err) {\n      client.currentsong(function(err, info) {\n        console.log(info.Artist); // Ennio Morricone\n        console.log(info.Title);  // Il Buono, Il Cattivo, Il Brutto\n        console.log(info.Album);  // The Good, The Bad, And The Ugly\n      });\n    });\n  });\n});\n```\n\nIf you prefer to just fire and forget, you can omit the callbacks.\n\n``` javascript\n// You can always omit the port/host if you're running\n// MPD locally and with the default settings.\nkomponist.createConnection(function(err, client) {\n  client.add('~/iTunes');\n  client.random();\n  client.play();\n});\n```\n\nThere's also a general purpose `command` method:\n\n``` javascript\nvar client = komponist.createConnection(function() {\n  // Jump 60 seconds into the 5th track in your playlist:\n  client.command('seek', [5, 60], function(err) {\n    // And stop playing when it's done.\n    client.command('single');\n  });\n});\n```\n\nThe client returned by `komponist.createConnection` is just an extended TCP stream, so if you\nlike you can just pipe data around the Node way:\n\n``` javascript\nvar fs = require('fs')\n  , client = komponist.createConnection()\n\n// Pipe a list of commands to MPD from\n// a file, piping the raw response out to\n// stdout! (For kicks)\nfs.createReadStream('./commands.mpd', 'utf8')\n  .pipe(client)\n  .pipe(process.stdout)\n```\n\n## Watching for Changes\n\nIf you're building an interface-driven client for MPD, you're going to want to\nbe able to listen for changes as they happen. This is all taken care of for you:\njust listen for the \"changed\" event for MPD updates.\n\n``` javascript\nvar komponist = require('komponist')\n\nkomponist.createConnection(6600, 'localhost')\n   .on('changed', function(system) {\n     console.log('Subsystem changed: ' + system);\n   });\n```\n\nAccording to the MPD protocol documentation, you can track changes to the\nfollowing systems this way:\n\n* `update`: a database update has started or finished.\n* `database`: the song database has been modified after `update`.\n* `stored_playlist`: a stored playlist has been modified.\n* `playlist`: the current playlist has been modified.\n* `player`: the player has been started, stopped or seeked.\n* `mixer`: the volume has been changed.\n* `output`: an audio output has been enabled or disabled.\n* `options`: options like repeat, random, crossfade, replay gain.\n* `sticker`: the sticker database has been modified.\n* `subscription`: a client has subscribed or unsubscribed to a channel.\n\n## Publish/Subscribe\n\nMPD has simple publish/subscribe support for communicating across multiple\nclients. Using the `publish` and `subscribe` methods, you can send messages\nto other subscribers across the network, e.g. for simple service discovery.\n\n``` javascript\nkomponist.createConnection(function(err, subscriber) {\n  subscriber.subscribe('hello');\n  subscriber.subscribe('world');\n\n  subscriber.on('message', function(message, channel) {\n    console.log('Got message \"' + message + '\" on channel \"' + channel + '\"');\n  });\n});\n\nkomponist.createConnection(function(err, publisher) {\n  setTimeout(function() {\n    publisher.publish('hello', 'message #1');\n    publisher.publish('world', 'message #2');\n  }, 1000);\n});\n\n// Output:\n// Got message \"message #1\" on channel \"hello\"\n// Got message \"message #2\" on channel \"world\"\n```\n\n## Stickers\n\nMPD stickers are a way for you to store arbitrary data in the MPD database,\nassociated with particular objects. Note that to enable stickers,\nadd `sticker_file ~/.mpd/mpd.stickers` to your `mpd.conf` file.\n\n``` javascript\nkomponist.createConnection(function(err, client) {\n  client.sticker('song', 'iTunes/song1.mp3').set({\n      hello: 'world'\n    , lorem: 'ipsum'\n  }, function(err) {\n    // The sticker method returns a reusable object, taking\n    // the arguments \"type\" and \"uri\".\n    var sticker = client.sticker('song', 'iTunes/song1.mp3');\n\n    sticker.get('hello', function(err, data) {\n      console.log(data); // { hello: 'world' }\n    });\n\n    sticker.get(['hello', 'lorem'], function(err, data) {\n      console.log(data); // { hello: 'world', lorem: 'ipsum' }\n    });\n\n    sticker.list(function(err, data) {\n      console.log(data); // { hello: 'world', lorem: 'ipsum' }\n    });\n\n    client.sticker('song', 'iTunes').find('lorem', function(err, data) {\n      console.log(data[0].file);    // 'iTunes/song1.mp3'\n      console.log(data[0].sticker); // { name: 'lorem', value: 'ipsum' }\n      console.log(data[1].file);    // 'iTunes/song2.mp3'\n      console.log(data[1].sticker); // { name: 'lorem', value: 'another ipsum' }\n    });\n  });\n\n  client.sticker('song', 'iTunes/song2.mp3').set({\n    lorem: 'another ipsum'\n  });\n});\n```\n\nIf you're looking to use the command in the same style as above, it's still\naccessible as `komponist._sticker()`.\n\n## Using Komponist in the Browser\n\nThanks to the fact that Komponist connections are streams, you can get the use\nthe module just the same on the browser as you would server-side, using\n[@substack](https://github.com/substack/)'s [browserify](//npmjs.org/package/browserify)\nmodule.\n\n``` javascript\n// On the server:\nvar http = require('http')\n  , komponist = require('komponist')\n\nvar server = http.createServer(function(req, res) {\n  res.end('Hello world.')\n});\n\nkomponist.install(server, 'localhost', 6600);\n\n// And on the browser:\nvar komponist = require('komponist');\n\nkomponist.createConnection(function(err, client) {\n  client.status(function(err, status) {\n    console.log('Status: ', status);\n  });\n});\n```\n\nThere's a full example available in the\n[Github repository](https://github.com/hughsk/komponist/tree/master/examples/browser).\n\n## Gotchas\n\nThe following methods are reserved for TCP sockets, and as such have been\naliased:\n\n* `pause` is now `client.toggle()`\n* `kill` is now `client.killServer()`\n* `close` will close the connection without issuing a command to MPD.\n\nThere's no support for `command_list_*` commands right now.\n\nYou can still access them as normal through the `command` method. If you come\nacross any other bugs or inconsistencies, you're more than welcome create an\nissue or a pull request.",
  "readmeFilename": "README.md",
  "_id": "komponist@0.0.3",
  "dist": {
    "shasum": "26205948b05c762f44ba84e63b5ad3b23bf0603d"
  },
  "_from": "komponist@",
  "_resolved": "https://registry.npmjs.org/komponist/-/komponist-0.0.3.tgz"
}
